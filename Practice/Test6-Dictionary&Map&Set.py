### 使用dict（map）和set

## Python内置了字典：dict的支持，dict全称dictionary，
## 在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度

# 假设要根据同学的名字查找对应的成绩，List需要两个才能完成，且速度被list总长度（位置）限制
# 用dict实现，查找速度不受长度影响
>>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}
>>> d['Michael']
95

## 由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：
## 如果key不存在，dict就会报错：

# 要避免key不存在的错误，有两种办法，一是通过in判断key是否存在：
>>> 'Thomas' in d
False

# 二是通过dict提供的get()方法，如果key不存在，可以返回None，或者自己指定的value：
>>> d.get('Thomas')
>>> d.get('Thomas', -1)
-1

## 注意：返回*None*的时候Python的交互环境不显示结果。

#要删除一个key，用pop(key)方法，对应的value也会从dict中删除：

>>> d.pop('Bob')
75
>>> d
{'Michael': 95, 'Tracy': 85}


# 请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。

# 和list比较，dict有以下几个特点：
#    查找和插入 的速度极快，不会随着key的增加而变慢；
#    需要占用大量的 内存，内存浪费多。
# 而list相反：
#    查找和插入的时间随着元素的增加而增加；
#    占用空间 小，浪费内存很少。
# 所以，dict是用 空间来换取时间 的一种方法。

# dict可以用在需要高速查找的很多地方， ***要牢记的第一条就是dict的key必须是**不可变对象**。

# 这个通过key计算value位置的算法称为*哈希算法（Hash）。要保证hash的正确性，key的对象就不能变。
# 在Python中，字符串、整数等都是不可变的，可以放心地作为key。而list是可变的，就不能作为key。


##set和dict类似，但只存储key,不存储value。且key不能重复。

#要创建一个set，需要提供一个list作为输入集合：

>>> s = set([1, 2, 3])
>>> s
{1, 2, 3}

## 注意，传入的参数[1, 2, 3]是一个list，而显示的这个set显示的顺序也不表示set是有序的。
## **List有序，但是dict和set都是不一定有序。

# 重复元素在set中自动被过滤，通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果
>>> s = set([1, 1, 2, 2, 3, 3])
>>> s.add(4)
>>> s
{1,2.3,4}
# 通过remove(key)方法可以删除元素

# set可以看成数学意义上的无序和无重复元素的集合，
# 因此，两个set可以做数学意义上的交集、并集等操作：
>>> s1 = set([1, 2, 3])
>>> s2 = set([2, 3, 4])
>>> s1 & s2
{2, 3}
>>> s1 | s2
{1, 2, 3, 4}

# set的原理和dict一样，同样不可以放入可变对象，因为无法判断两个可变对象是否相等
## set和dict的唯一区别仅在于没有存储对应的value

## 不可变 -- 可看作是常量

# str是不变对象，而list是可变对象
# replace函数变换大小写的时候，实质生成了另一个Str
>>> a = 'abc'
>>> b = a.replace('a', 'A')
>>> b
'Abc'
>>> a
'abc'














