
### 多重继承

## 继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能
class Bat(Mammal, Flyable):
    pass

## 通过多重继承，一个子类就可以同时获得多个父类的所有功能


## MixIn

# 如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让Ostrich除了继承自Bird外，
# 再同时继承Runnable。这种设计通常称之为MixIn

# MixIn的目的就是给一个类增加多个功能，在设计类的时候，
## 我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。

# Python自带的很多库也使用了MixIn。举个例子，
# Python自带了TCPServer和UDPServer这两类网络服务，
# 而要同时服务多个用户就必须使用多进程或多线程模型，
# 这两种模型由ForkingMixIn和ThreadingMixIn提供。通过组合，我们就可以创造出合适的服务

## 我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。


## 小结

# 由于Python允许使用多重继承，因此，MixIn就是一种常见的设计。
# 只允许单一继承的语言（如Java）不能使用MixIn的设计。


## Python区分子类调用的是哪个父类的方法，是Python 会按照特定的顺序遍历继承图。
## 这个顺序叫方法解析顺序（ Method Resolution Order， MRO）。
## 类都有一个名为 __mro__ 的属性， 它的值是一个元组， 按照方法解析顺序列出各个超类，
## 从当前类一直向上， 直到object 类。  ## 似乎是继承时，靠左的父，比较近，广度优先


# 什么是拓扑排序：
# 从DAG途中选择一个没有前驱(即入度为0)的顶点并输出
# 从图中删除该顶点和所有以它为起点的有向边。
# 重复1和2直到当前DAG图为空或当前途中不存在无前驱的顶点为止。
# 后一种情况说明有向图中必然存在环。

# python多重继承：
# 把继承关系先构成一张图
# 利用拓扑排序的方法输出拓扑顺序，并列关系时遵循取最左原则
# python继承顺序遵循C3算法，只要在一个地方找到了所需的内容，就不再继续查找
